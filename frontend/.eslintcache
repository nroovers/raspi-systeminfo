[{"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\index.js":"1","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\App.js":"2","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\services\\infoService.js":"4","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\CpuInfo.js":"5","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\MemInfo.js":"6","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\Overview.js":"7","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\ProcInfo.js":"8","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\NetInfo.js":"9","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\Header.js":"10","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\SortTable.js":"11"},{"size":551,"mtime":1611860503212,"results":"12","hashOfConfig":"13"},{"size":1404,"mtime":1612293609188,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":658,"mtime":1611854376789,"results":"16","hashOfConfig":"13"},{"size":5684,"mtime":1612295247745,"results":"17","hashOfConfig":"13"},{"size":3946,"mtime":1612291269167,"results":"18","hashOfConfig":"13"},{"size":1395,"mtime":1612289589298,"results":"19","hashOfConfig":"13"},{"size":4870,"mtime":1612710956111,"results":"20","hashOfConfig":"13"},{"size":3658,"mtime":1612121123285,"results":"21","hashOfConfig":"13"},{"size":882,"mtime":1612294159092,"results":"22","hashOfConfig":"13"},{"size":2223,"mtime":1612710529004,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"68gzi8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\index.js",[],["48","49"],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\App.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\services\\infoService.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\CpuInfo.js",["50"],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport infoService from '../services/infoService'\r\nimport Chart from \"react-google-charts\";\r\nimport { Row, Col } from \"react-bootstrap\"\r\n\r\n\r\n// TODO fix state updating only when mounted -> useEffect to return cleanup function\r\n\r\nconst CpuInfo = (props) => {\r\n\r\n    const maxGraphIntervals = 25\r\n    const refreshInterval = 5000;\r\n    // const [refreshInterval, setRefreshInterval] = useState(10000);\r\n\r\n    const [info, setInfo] = useState({ cpu: {}, cpuLoad: [], cpuTemp: [] })\r\n\r\n    const fetchMetrics = () => {\r\n        // retrieve and then setData()\r\n        console.log('fetchmetrics')\r\n        infoService.getInfo(['cpuTemp', 'cpuLoad'])\r\n            .then(data => {\r\n                console.log('metrics fetched')//, data, info.cpuTemp, data.cpuTemp.main)\r\n                // console.log('->', tempData)\r\n                // console.log('-->', data, data.cpuTemp.main, tempData.concat(data.cpuTemp.main))\r\n                var updatedInfo = {\r\n                    cpu: info.cpu,\r\n                    cpuTemp: (info.cpuTemp.length === maxGraphIntervals ? info.cpuTemp.slice(1) : info.cpuTemp).concat(data.cpuTemp.main),\r\n                    cpuLoad: (info.cpuLoad.length === maxGraphIntervals ? info.cpuLoad.slice(1) : info.cpuLoad).concat(data.cpuLoad.currentload),\r\n                }\r\n                // console.log('updatedInfo', info, updatedInfo)\r\n                setInfo(updatedInfo)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('useeffect CPU')\r\n        var cpuInfoMounted = true\r\n        infoService.getInfo(['cpu'])\r\n            .then(data => {\r\n                console.log('CPU data')//, data)\r\n                if (cpuInfoMounted)\r\n                    setInfo({ ...info, cpu: data.cpu })\r\n            })\r\n        return () => cpuInfoMounted = false\r\n    }, [])\r\n    // }, [info.cpu]);\r\n\r\n    useEffect(() => {\r\n        console.log('useeffect Interval')\r\n        if (refreshInterval && refreshInterval > 0) {\r\n            const interval = setInterval(fetchMetrics, refreshInterval);\r\n            return () => clearInterval(interval);\r\n        }\r\n        // }, [refreshInterval]);\r\n    });\r\n\r\n    const getChartData = (label, infoData) => {\r\n        console.log('infodata', infoData)\r\n\r\n        var i = 0\r\n        var chartData = [['x', label]]\r\n        for (i = 0; i < maxGraphIntervals; i++) {\r\n            chartData = chartData.concat([[i, (i < infoData.length ? infoData[infoData.length - i - 1] : 0)]])\r\n        }\r\n        return chartData\r\n    }\r\n\r\n    // console.log('info.cpuLoad', getChartData('load', info.cpuLoad))\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col></Col>\r\n            </Row>\r\n            <Row>\r\n                <Col><h2>CPU</h2></Col>\r\n            </Row>\r\n            <Row xs={1} md={2}>\r\n                <Col>Manufacturer: {info.cpu?.manufacturer}</Col>\r\n                <Col>Speed: {info.cpu?.speed} GHz</Col>\r\n                <Col>Brand: {info.cpu?.brand}</Col>\r\n                <Col>Current load: {info.cpuLoad.length > 0 ? (info.cpuLoad[info.cpuLoad.length - 1]).toFixed(2) : 0} %</Col>\r\n                <Col>Cores: {info.cpu?.cores}</Col>\r\n                <Col>Current temperature: {info.cpuTemp.length > 0 ? (info.cpuTemp[info.cpuTemp.length - 1]).toFixed(2) : 0} C</Col>\r\n            </Row>\r\n\r\n            {/* \r\n            <p>manufacturer: {info.cpu?.manufacturer}</p>\r\n            <p>brand: {info.cpu?.brand}</p>\r\n            <p>speed: {info.cpu?.speed} GHz</p>\r\n            <p>cores: {info.cpu?.cores}</p>\r\n            <p>Current load: {info.cpuLoad.length > 0 ? (info.cpuLoad[info.cpuLoad.length - 1]).toFixed(2) : 0} %</p>\r\n            <p>Current temperature: {info.cpuTemp.length > 0 ? (info.cpuTemp[info.cpuTemp.length - 1]).toFixed(2) : 0} C</p> \r\n            */}\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Chart\r\n                        width={'500px'}\r\n                        height={'300px'}\r\n                        chartType=\"LineChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={getChartData('load', info.cpuLoad)}\r\n                        options={{\r\n                            title: 'CPU Load',\r\n                            hAxis: {},\r\n                            vAxis: {\r\n                                // title: 'Load',\r\n                                viewWindow: { min: 0, max: 100 }\r\n                            },\r\n                            legend: 'bottom',\r\n                        }}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Chart\r\n                        width={'500px'}\r\n                        height={'300px'}\r\n                        chartType=\"LineChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={getChartData('temp', info.cpuTemp)}\r\n                        options={{\r\n                            title: 'CPU Temperature',\r\n                            hAxis: {\r\n                                // baseline: 20,\r\n                                // color: '#333', \r\n                                // minSpacing: 20\r\n                            },\r\n                            vAxis: {\r\n                                // title: 'Temperature',\r\n                                // color: '#333', minSpacing: 20\r\n                                viewWindow: { min: 40, max: 100 }\r\n                            },\r\n                            legend: 'bottom',\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CpuInfo ","C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\MemInfo.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\Overview.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\ProcInfo.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\NetInfo.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\Header.js",[],"C:\\Users\\Nicolai\\Documents\\Coding\\raspi-systeminfo\\frontend\\src\\components\\SortTable.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":46,"column":8,"nodeType":"57","endLine":46,"endColumn":10,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array. You can also do a functional update 'setInfo(i => ...)' if you only need 'info' in the 'setInfo' call.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [info]",{"range":"64","text":"65"},[1868,1870],"[info]"]